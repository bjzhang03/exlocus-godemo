// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.0
// source: msgs.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The request message containing the user's name.
type MsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MsgRequest) Reset() {
	*x = MsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRequest) ProtoMessage() {}

func (x *MsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRequest.ProtoReflect.Descriptor instead.
func (*MsgRequest) Descriptor() ([]byte, []int) {
	return file_msgs_proto_rawDescGZIP(), []int{0}
}

func (x *MsgRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// The response message containing the greetings
type MsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MsgReply) Reset() {
	*x = MsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReply) ProtoMessage() {}

func (x *MsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_msgs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReply.ProtoReflect.Descriptor instead.
func (*MsgReply) Descriptor() ([]byte, []int) {
	return file_msgs_proto_rawDescGZIP(), []int{1}
}

func (x *MsgReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_msgs_proto protoreflect.FileDescriptor

var file_msgs_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xad, 0x01, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x47, 0x72, 0x65,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x50, 0x75, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x35,
	0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msgs_proto_rawDescOnce sync.Once
	file_msgs_proto_rawDescData = file_msgs_proto_rawDesc
)

func file_msgs_proto_rawDescGZIP() []byte {
	file_msgs_proto_rawDescOnce.Do(func() {
		file_msgs_proto_rawDescData = protoimpl.X.CompressGZIP(file_msgs_proto_rawDescData)
	})
	return file_msgs_proto_rawDescData
}

var file_msgs_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_msgs_proto_goTypes = []interface{}{
	(*MsgRequest)(nil), // 0: proto.MsgRequest
	(*MsgReply)(nil),   // 1: proto.MsgReply
}
var file_msgs_proto_depIdxs = []int32{
	0, // 0: proto.MsgGreeter.GetStream:input_type -> proto.MsgRequest
	0, // 1: proto.MsgGreeter.PutStream:input_type -> proto.MsgRequest
	0, // 2: proto.MsgGreeter.AllStream:input_type -> proto.MsgRequest
	1, // 3: proto.MsgGreeter.GetStream:output_type -> proto.MsgReply
	1, // 4: proto.MsgGreeter.PutStream:output_type -> proto.MsgReply
	1, // 5: proto.MsgGreeter.AllStream:output_type -> proto.MsgReply
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_msgs_proto_init() }
func file_msgs_proto_init() {
	if File_msgs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msgs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msgs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msgs_proto_goTypes,
		DependencyIndexes: file_msgs_proto_depIdxs,
		MessageInfos:      file_msgs_proto_msgTypes,
	}.Build()
	File_msgs_proto = out.File
	file_msgs_proto_rawDesc = nil
	file_msgs_proto_goTypes = nil
	file_msgs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MsgGreeterClient is the client API for MsgGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgGreeterClient interface {
	//以下 分别是 服务端 推送流， 客户端 推送流 ，双向流。
	GetStream(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (MsgGreeter_GetStreamClient, error)
	PutStream(ctx context.Context, opts ...grpc.CallOption) (MsgGreeter_PutStreamClient, error)
	AllStream(ctx context.Context, opts ...grpc.CallOption) (MsgGreeter_AllStreamClient, error)
}

type msgGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgGreeterClient(cc grpc.ClientConnInterface) MsgGreeterClient {
	return &msgGreeterClient{cc}
}

func (c *msgGreeterClient) GetStream(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (MsgGreeter_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MsgGreeter_serviceDesc.Streams[0], "/proto.MsgGreeter/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &msgGreeterGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MsgGreeter_GetStreamClient interface {
	Recv() (*MsgReply, error)
	grpc.ClientStream
}

type msgGreeterGetStreamClient struct {
	grpc.ClientStream
}

func (x *msgGreeterGetStreamClient) Recv() (*MsgReply, error) {
	m := new(MsgReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *msgGreeterClient) PutStream(ctx context.Context, opts ...grpc.CallOption) (MsgGreeter_PutStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MsgGreeter_serviceDesc.Streams[1], "/proto.MsgGreeter/PutStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &msgGreeterPutStreamClient{stream}
	return x, nil
}

type MsgGreeter_PutStreamClient interface {
	Send(*MsgRequest) error
	CloseAndRecv() (*MsgReply, error)
	grpc.ClientStream
}

type msgGreeterPutStreamClient struct {
	grpc.ClientStream
}

func (x *msgGreeterPutStreamClient) Send(m *MsgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *msgGreeterPutStreamClient) CloseAndRecv() (*MsgReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MsgReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *msgGreeterClient) AllStream(ctx context.Context, opts ...grpc.CallOption) (MsgGreeter_AllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MsgGreeter_serviceDesc.Streams[2], "/proto.MsgGreeter/AllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &msgGreeterAllStreamClient{stream}
	return x, nil
}

type MsgGreeter_AllStreamClient interface {
	Send(*MsgRequest) error
	Recv() (*MsgReply, error)
	grpc.ClientStream
}

type msgGreeterAllStreamClient struct {
	grpc.ClientStream
}

func (x *msgGreeterAllStreamClient) Send(m *MsgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *msgGreeterAllStreamClient) Recv() (*MsgReply, error) {
	m := new(MsgReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MsgGreeterServer is the server API for MsgGreeter service.
type MsgGreeterServer interface {
	//以下 分别是 服务端 推送流， 客户端 推送流 ，双向流。
	GetStream(*MsgRequest, MsgGreeter_GetStreamServer) error
	PutStream(MsgGreeter_PutStreamServer) error
	AllStream(MsgGreeter_AllStreamServer) error
}

// UnimplementedMsgGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedMsgGreeterServer struct {
}

func (*UnimplementedMsgGreeterServer) GetStream(*MsgRequest, MsgGreeter_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedMsgGreeterServer) PutStream(MsgGreeter_PutStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutStream not implemented")
}
func (*UnimplementedMsgGreeterServer) AllStream(MsgGreeter_AllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllStream not implemented")
}

func RegisterMsgGreeterServer(s *grpc.Server, srv MsgGreeterServer) {
	s.RegisterService(&_MsgGreeter_serviceDesc, srv)
}

func _MsgGreeter_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MsgRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MsgGreeterServer).GetStream(m, &msgGreeterGetStreamServer{stream})
}

type MsgGreeter_GetStreamServer interface {
	Send(*MsgReply) error
	grpc.ServerStream
}

type msgGreeterGetStreamServer struct {
	grpc.ServerStream
}

func (x *msgGreeterGetStreamServer) Send(m *MsgReply) error {
	return x.ServerStream.SendMsg(m)
}

func _MsgGreeter_PutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MsgGreeterServer).PutStream(&msgGreeterPutStreamServer{stream})
}

type MsgGreeter_PutStreamServer interface {
	SendAndClose(*MsgReply) error
	Recv() (*MsgRequest, error)
	grpc.ServerStream
}

type msgGreeterPutStreamServer struct {
	grpc.ServerStream
}

func (x *msgGreeterPutStreamServer) SendAndClose(m *MsgReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *msgGreeterPutStreamServer) Recv() (*MsgRequest, error) {
	m := new(MsgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MsgGreeter_AllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MsgGreeterServer).AllStream(&msgGreeterAllStreamServer{stream})
}

type MsgGreeter_AllStreamServer interface {
	Send(*MsgReply) error
	Recv() (*MsgRequest, error)
	grpc.ServerStream
}

type msgGreeterAllStreamServer struct {
	grpc.ServerStream
}

func (x *msgGreeterAllStreamServer) Send(m *MsgReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *msgGreeterAllStreamServer) Recv() (*MsgRequest, error) {
	m := new(MsgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MsgGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MsgGreeter",
	HandlerType: (*MsgGreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _MsgGreeter_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutStream",
			Handler:       _MsgGreeter_PutStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllStream",
			Handler:       _MsgGreeter_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "msgs.proto",
}
