// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

/*
Package xcl is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	UserInfo
	UserID
	FuncResponse
*/
package xcl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserStatus int32

const (
	UserStatus_OFFLINE UserStatus = 0
	UserStatus_ONLINE  UserStatus = 1
)

var UserStatus_name = map[int32]string{
	0: "OFFLINE",
	1: "ONLINE",
}
var UserStatus_value = map[string]int32{
	"OFFLINE": 0,
	"ONLINE":  1,
}

func (x UserStatus) String() string {
	return proto.EnumName(UserStatus_name, int32(x))
}
func (UserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UserInfo struct {
	Id     int32      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Status UserStatus `protobuf:"varint,3,opt,name=status,enum=xcl.UserStatus" json:"status,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetStatus() UserStatus {
	if m != nil {
		return m.Status
	}
	return UserStatus_OFFLINE
}

type UserID struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserID) Reset()                    { *m = UserID{} }
func (m *UserID) String() string            { return proto.CompactTextString(m) }
func (*UserID) ProtoMessage()               {}
func (*UserID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FuncResponse struct {
	Reply string `protobuf:"bytes,1,opt,name=reply" json:"reply,omitempty"`
}

func (m *FuncResponse) Reset()                    { *m = FuncResponse{} }
func (m *FuncResponse) String() string            { return proto.CompactTextString(m) }
func (*FuncResponse) ProtoMessage()               {}
func (*FuncResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FuncResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "xcl.UserInfo")
	proto.RegisterType((*UserID)(nil), "xcl.UserID")
	proto.RegisterType((*FuncResponse)(nil), "xcl.funcResponse")
	proto.RegisterEnum("xcl.UserStatus", UserStatus_name, UserStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	Login(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*FuncResponse, error)
	Logout(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*FuncResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*FuncResponse, error) {
	out := new(FuncResponse)
	err := grpc.Invoke(ctx, "/xcl.UserService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logout(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*FuncResponse, error) {
	out := new(FuncResponse)
	err := grpc.Invoke(ctx, "/xcl.UserService/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Login(context.Context, *UserInfo) (*FuncResponse, error)
	Logout(context.Context, *UserID) (*FuncResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xcl.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xcl.UserService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logout(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xcl.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0x97, 0xce, 0x46, 0x77, 0xaa, 0x53, 0x2f, 0x3e, 0x14, 0x9f, 0x4a, 0x51, 0x2c, 0x13,
	0xfa, 0x30, 0xff, 0xc2, 0x1c, 0x0c, 0xca, 0x06, 0x11, 0xf1, 0x79, 0x66, 0x69, 0x29, 0xd4, 0xa4,
	0x24, 0xad, 0xcc, 0x7f, 0x2f, 0x8b, 0x62, 0x45, 0x7c, 0x3b, 0x27, 0xf9, 0xf8, 0x92, 0x7b, 0x81,
	0xca, 0xb6, 0x32, 0x6f, 0xad, 0xe9, 0x0c, 0x8d, 0xf7, 0xb2, 0x49, 0x5f, 0x70, 0xf2, 0xec, 0x94,
	0x5d, 0xe9, 0xd2, 0xd0, 0x14, 0x41, 0xbd, 0x8b, 0x59, 0xc2, 0xb2, 0x50, 0x04, 0xf5, 0x8e, 0x08,
	0x47, 0x7a, 0xfb, 0xa6, 0xe2, 0x20, 0x61, 0xd9, 0x44, 0xf8, 0x4c, 0x77, 0xe0, 0xae, 0xdb, 0x76,
	0xbd, 0x8b, 0xc7, 0x09, 0xcb, 0xa6, 0xf3, 0xf3, 0x7c, 0x2f, 0x9b, 0xfc, 0xa0, 0x78, 0xf2, 0xc7,
	0xe2, 0xfb, 0x3a, 0x8d, 0xc1, 0xbd, 0x78, 0xf1, 0x57, 0x9b, 0xde, 0xe0, 0xb4, 0xec, 0xb5, 0x14,
	0xca, 0xb5, 0x46, 0x3b, 0x45, 0x57, 0x08, 0xad, 0x6a, 0x9b, 0x0f, 0x8f, 0x4c, 0xc4, 0x57, 0x99,
	0xdd, 0x02, 0x83, 0x95, 0x22, 0x1c, 0x6f, 0x96, 0xcb, 0x62, 0xb5, 0x7e, 0xbc, 0x18, 0x11, 0xc0,
	0x37, 0x6b, 0x9f, 0xd9, 0xbc, 0x44, 0xe4, 0x31, 0x65, 0xdf, 0x6b, 0xa9, 0xe8, 0x1e, 0x61, 0x61,
	0xaa, 0x5a, 0xd3, 0xd9, 0xcf, 0xbf, 0x0e, 0xa3, 0x5d, 0x5f, 0xfa, 0xfa, 0xfb, 0xd9, 0x74, 0x44,
	0x33, 0xf0, 0xc2, 0x54, 0xa6, 0xef, 0x28, 0x1a, 0xe8, 0xc5, 0xbf, 0xec, 0x2b, 0xf7, 0x3b, 0x7b,
	0xf8, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x96, 0x00, 0x2c, 0x41, 0x01, 0x00, 0x00,
}
